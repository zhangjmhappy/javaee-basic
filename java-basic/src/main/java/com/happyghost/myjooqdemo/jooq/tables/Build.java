/*
 * This file is generated by jOOQ.
*/
package com.happyghost.myjooqdemo.jooq.tables;


import com.happyghost.myjooqdemo.jooq.Indexes;
import com.happyghost.myjooqdemo.jooq.Keys;
import com.happyghost.myjooqdemo.jooq.TestDemo;
import com.happyghost.myjooqdemo.jooq.tables.records.BuildRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Build extends TableImpl<BuildRecord> {

    private static final long serialVersionUID = 2048860061;

    /**
     * The reference instance of <code>test_demo.build</code>
     */
    public static final Build BUILD = new Build();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuildRecord> getRecordType() {
        return BuildRecord.class;
    }

    /**
     * The column <code>test_demo.build.id</code>. id
     */
    public final TableField<BuildRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "id");

    /**
     * The column <code>test_demo.build.name</code>. 建筑名称
     */
    public final TableField<BuildRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "建筑名称");

    /**
     * The column <code>test_demo.build.address</code>. 地址
     */
    public final TableField<BuildRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(100), this, "地址");

    /**
     * The column <code>test_demo.build.shopId</code>. 店铺id
     */
    public final TableField<BuildRecord, Integer> SHOPID = createField("shopId", org.jooq.impl.SQLDataType.INTEGER, this, "店铺id");

    /**
     * Create a <code>test_demo.build</code> table reference
     */
    public Build() {
        this(DSL.name("build"), null);
    }

    /**
     * Create an aliased <code>test_demo.build</code> table reference
     */
    public Build(String alias) {
        this(DSL.name(alias), BUILD);
    }

    /**
     * Create an aliased <code>test_demo.build</code> table reference
     */
    public Build(Name alias) {
        this(alias, BUILD);
    }

    private Build(Name alias, Table<BuildRecord> aliased) {
        this(alias, aliased, null);
    }

    private Build(Name alias, Table<BuildRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return TestDemo.TEST_DEMO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BUILD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BuildRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_BUILD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BuildRecord> getPrimaryKey() {
        return Keys.KEY_BUILD_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BuildRecord>> getKeys() {
        return Arrays.<UniqueKey<BuildRecord>>asList(Keys.KEY_BUILD_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Build as(String alias) {
        return new Build(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Build as(Name alias) {
        return new Build(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Build rename(String name) {
        return new Build(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Build rename(Name name) {
        return new Build(name, null);
    }
}
